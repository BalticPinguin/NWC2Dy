Index: src/ddscf/print_1eints.F
  ===================================================================
--- src/ddscf/print_1eints.F	(revision 24242)
+++ src/ddscf/dprint_1eints.F	(working copy)
@@ -11,12 +11,6 @@
 #include "cscfps.fh"
 #include "sym.fh"
 #include "geom.fh"
-c#include "util.fh"
-c#include "stdio.fh"
-c#include "tcgmsg.fh"
-c#include "crohf.fh"
-c#include "cscf.fh"
-c#include "bas.fh"
 c     
 c     This is the original routine of print_1eints. It is still needed by the 
 c     Douglas-Kroll routines to avoid recursive routine calling.
@@ -112,16 +106,16 @@
 c
       odbug=.false.
       osome=.false.
-      osome=osome.or.odbug
+      osome=osome.or.odbug       ! allways false!? (Hubert)
       odbug=odbug.and.(ga_nodeid().eq.0)
-      osome=osome.and.(ga_nodeid().eq.0)
-      if(osome) then
+      osome=osome.and.(ga_nodeid().eq.0) ! than this is false as well (Hubert)
+      if(osome) then    ! never reached! (Hubert)
          write(6,*) 'in -int_1e_oldga- ... integ_type = ',
      $              integ_type,ga_nodeid()
          call util_flush(6)
       endif
 c
-      call ga_sync()
+      call ga_sync() ! here, oscfps, oskel are set!? (Hubert)
       if (oscfps) call pstat_on(ps_int_1e)
 c     
       if (oskel) then
@@ -130,7 +124,7 @@
      &       BASIS_ERR)
       end if
 c     
-      if (inp_compare(.false., integ_type, 'kinetic')) then
+      if (inp_compare(.false., integ_type, 'kinetic')) then   ! look at inp_compare as well! (Hubert)
          type = 1
       else if (inp_compare(.false., integ_type, 'potential')) then
          type = 2
@@ -235,13 +229,14 @@
       call print_1e_init_cartbf(cartbf)
 c
 c
+      if(iproc.eq.0) then
       do jshell = 1, nshell_j
          do ishell = 1, nshell_i
 c
-            if (mod(ijshell, nproc) .eq. iproc) then
+cprog            if (mod(ijshell, nproc) .eq. iproc) then
               odoit = .true.
               if (oskel) odoit = sym_shell_pair(ibas,ishell,jshell,q2)
-              if (odoit) then
+cnosym              if (odoit) then
                 if (.not. bas_cn2bfr(ibas, ishell, ilo, ihi)) 
      $           call errquit('print_1eints: bas_cn2bfr',ibas,BASIS_ERR)
                 if (.not. bas_cn2bfr(jbas, jshell, jlo, jhi))
@@ -310,8 +305,8 @@
      $                  mem1, dbl_mb(k_scr), max1e, dbl_mb(k_buf))
                 else if (type .eq. 3) then
                    inttitle = '1eov'
-                   call int_1eov (jbas, jshell, ibas, ishell, 
-     $                  mem1, dbl_mb(k_scr), max1e, dbl_mb(k_buf))
+                   call int_1eov (jbas, jshell, ibas, ishell,    ! This could be interesting!   (Hubert)
+     $                  mem1, dbl_mb(k_scr), max1e, dbl_mb(k_buf)) ! defitition in NWints/api/int_1estv.F, l. 400 ff
                 else if (type .eq. 4) then
                    inttitle = '1epvpe'
                    call int_1epvpe (jbas, jshell, ibas, ishell, 
@@ -340,7 +335,7 @@
 c     
 c     Print the integrals
 c    
-                more_printing = .true.
+                more_printing = .true.  ! here, interesting part starts for output (Hubert)
                 if (.not.more_printing) then
                   call print_1e_buf(ilo, ihi,jlo,jhi,
      &                 dbl_mb(k_buf),inttitle)
@@ -348,7 +343,7 @@
 c
 c                 Printing atomic basis set information
 c
-                  call print_1e_buf_more(ilo,ihi,jlo,jhi,
+                  call print_1e_buf_more(ilo,ihi,jlo,jhi, ! this is always the case (Hubert)
      &                 dbl_mb(k_buf),inttitle,ishell,jshell,
      &                 iatom,jatom,isymbol,jsymbol,itype,jtype,
      &                 icbf,jcbf)
@@ -356,11 +351,12 @@
 c                 The end
 c
                 endif
-              end if
-            endif
+cnosym              end if
+c            endif !proc
             ijshell = ijshell + 1
          end do
       end do
+      endif ! iproc.eq.0
 c     
 c     chop stack at first item allocated
 c     
@@ -397,9 +393,9 @@
 c
       do j = jlo, jhi
          do i = ilo, ihi
-            if (abs(buf(i,j)).gt.1d-8) then
+            if (abs(buf(i,j)).gt.0) then   ! changed it (Hubert) before: .gt.1e-8
                write(6,1) inttitle,i,j,buf(i,j)
- 1             format(A,2i5,f20.8)
+ 1             format(A,2i5,E20.10)   ! changed it (Hubert) before: f10.8
             endif
          enddo
       enddo
@@ -430,11 +426,11 @@
 c
 
 c
-      call print_1e_init_cartbf(cartbf)
+      call print_1e_init_cartbf(cartbf)   ! here, cartbf() is set (Hubert). But where is it needed??
 c
       do j = jlo, jhi
          do i = ilo, ihi
-            if (abs(buf(i,j)).gt.1d-8) then
+            if (abs(buf(i,j)).gt.0) then  ! changed this to print all. before: .gt. 1d-8 (Hubert)
 c               write(6,*) 'ishell = ',ishell
 c               write(6,*) 'jshell = ',jshell
 c               write(6,*) 'iatom = ',iatom
@@ -450,15 +446,15 @@
                write(6,1) title,i,isymbol,shtypes(itype),
      &                          j,jsymbol,shtypes(jtype),buf(i,j)
  1             format(A,i5,3x,a2,1x,a1,1x,
-     &                  i5,3x,a2,1x,a1,1x,f20.8)
+     &                  i5,3x,a2,1x,a1,1x,e20.10)  ! changed; from ,f20,8 (Hubert)
             endif
          enddo
       enddo
 c
       end
 c
-      subroutine print_1e_init_cartbf(cartbf)
-      implicit none
+      subroutine print_1e_init_cartbf(cartbf)  ! conversion from numbers to letters. (Hubert)
+      implicit none                            ! How is this done?
 c
       character*8 cartbf(-1:7,1:36)
 c
